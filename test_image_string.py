import os, json, base64, requests
from traceback import print_exc
from io import BytesIO
from PIL import Image
from config import *
from pprint import pprint
from time import time

start_time = time()
api_url = 'http://localhost:630/generate_thumbnail'
headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}

# test with image string
image_data = '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'
original_image_data = base64.b64decode(image_data)
buffer = BytesIO(original_image_data)
image = Image.open(buffer)
image.show()
payload = json.dumps({"image_data": image_data})

try:
    response = requests.post(api_url, data=payload, headers=headers)
    response_dict = response.json()
    pprint(response_dict)
    image_data = response_dict['image_data']
    if image_data:
        resized_image_data = base64.b64decode(image_data)
        buffer = BytesIO(resized_image_data)
        image = Image.open(buffer)
        image.show()
    else:
        print('Image_data is empty. ')
except:
    print_exc()
    
end_time = time()
time_cost = round(end_time - start_time, 4)
time_cost_sec = int(time_cost)
time_cost_ms = int((time_cost - time_cost_sec)*1000)
print(f"Time cost = {time_cost_sec}s{time_cost_ms}ms")